// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: eventsourcing/v1/eventsourcing.proto

package eventsourcingv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/eventgraph/api/gen/eventsourcing/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// EventStoreServiceName is the fully-qualified name of the EventStoreService service.
	EventStoreServiceName = "eventsourcing.v1.EventStoreService"
)

// EventStoreServiceClient is a client for the eventsourcing.v1.EventStoreService service.
type EventStoreServiceClient interface {
	Append(context.Context, *connect_go.Request[v1.AppendRequest]) (*connect_go.Response[v1.AppendResponse], error)
	Events(context.Context, *connect_go.Request[v1.EventsRequest]) (*connect_go.Response[v1.EventsResponse], error)
}

// NewEventStoreServiceClient constructs a client for the eventsourcing.v1.EventStoreService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEventStoreServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) EventStoreServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &eventStoreServiceClient{
		append: connect_go.NewClient[v1.AppendRequest, v1.AppendResponse](
			httpClient,
			baseURL+"/eventsourcing.v1.EventStoreService/Append",
			opts...,
		),
		events: connect_go.NewClient[v1.EventsRequest, v1.EventsResponse](
			httpClient,
			baseURL+"/eventsourcing.v1.EventStoreService/Events",
			opts...,
		),
	}
}

// eventStoreServiceClient implements EventStoreServiceClient.
type eventStoreServiceClient struct {
	append *connect_go.Client[v1.AppendRequest, v1.AppendResponse]
	events *connect_go.Client[v1.EventsRequest, v1.EventsResponse]
}

// Append calls eventsourcing.v1.EventStoreService.Append.
func (c *eventStoreServiceClient) Append(ctx context.Context, req *connect_go.Request[v1.AppendRequest]) (*connect_go.Response[v1.AppendResponse], error) {
	return c.append.CallUnary(ctx, req)
}

// Events calls eventsourcing.v1.EventStoreService.Events.
func (c *eventStoreServiceClient) Events(ctx context.Context, req *connect_go.Request[v1.EventsRequest]) (*connect_go.Response[v1.EventsResponse], error) {
	return c.events.CallUnary(ctx, req)
}

// EventStoreServiceHandler is an implementation of the eventsourcing.v1.EventStoreService service.
type EventStoreServiceHandler interface {
	Append(context.Context, *connect_go.Request[v1.AppendRequest]) (*connect_go.Response[v1.AppendResponse], error)
	Events(context.Context, *connect_go.Request[v1.EventsRequest]) (*connect_go.Response[v1.EventsResponse], error)
}

// NewEventStoreServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEventStoreServiceHandler(svc EventStoreServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/eventsourcing.v1.EventStoreService/Append", connect_go.NewUnaryHandler(
		"/eventsourcing.v1.EventStoreService/Append",
		svc.Append,
		opts...,
	))
	mux.Handle("/eventsourcing.v1.EventStoreService/Events", connect_go.NewUnaryHandler(
		"/eventsourcing.v1.EventStoreService/Events",
		svc.Events,
		opts...,
	))
	return "/eventsourcing.v1.EventStoreService/", mux
}

// UnimplementedEventStoreServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEventStoreServiceHandler struct{}

func (UnimplementedEventStoreServiceHandler) Append(context.Context, *connect_go.Request[v1.AppendRequest]) (*connect_go.Response[v1.AppendResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("eventsourcing.v1.EventStoreService.Append is not implemented"))
}

func (UnimplementedEventStoreServiceHandler) Events(context.Context, *connect_go.Request[v1.EventsRequest]) (*connect_go.Response[v1.EventsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("eventsourcing.v1.EventStoreService.Events is not implemented"))
}
