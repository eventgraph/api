// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file eventsourcing/v1/eventsourcing.proto (package eventsourcing.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message eventsourcing.v1.EntityPair
 */
export class EntityPair extends Message<EntityPair> {
  /**
   * @generated from field: int64 from_entity = 1;
   */
  fromEntity = protoInt64.zero;

  /**
   * @generated from field: int64 to_entity = 2;
   */
  toEntity = protoInt64.zero;

  constructor(data?: PartialMessage<EntityPair>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "eventsourcing.v1.EntityPair";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from_entity", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "to_entity", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EntityPair {
    return new EntityPair().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EntityPair {
    return new EntityPair().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EntityPair {
    return new EntityPair().fromJsonString(jsonString, options);
  }

  static equals(a: EntityPair | PlainMessage<EntityPair> | undefined, b: EntityPair | PlainMessage<EntityPair> | undefined): boolean {
    return proto3.util.equals(EntityPair, a, b);
  }
}

/**
 * @generated from message eventsourcing.v1.ComponentsTransaction
 */
export class ComponentsTransaction extends Message<ComponentsTransaction> {
  /**
   * @generated from field: repeated int64 i64s = 1;
   */
  i64s: bigint[] = [];

  /**
   * @generated from field: repeated double f64s = 2;
   */
  f64s: number[] = [];

  /**
   * @generated from field: repeated string texts = 3;
   */
  texts: string[] = [];

  /**
   * @generated from field: repeated bytes binaries = 4;
   */
  binaries: Uint8Array[] = [];

  /**
   * @generated from field: map<int64, eventsourcing.v1.ComponentsTransaction.Patch> patches = 5;
   */
  patches: { [key: string]: ComponentsTransaction_Patch } = {};

  constructor(data?: PartialMessage<ComponentsTransaction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "eventsourcing.v1.ComponentsTransaction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "i64s", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
    { no: 2, name: "f64s", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, repeated: true },
    { no: 3, name: "texts", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "binaries", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 5, name: "patches", kind: "map", K: 3 /* ScalarType.INT64 */, V: {kind: "message", T: ComponentsTransaction_Patch} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComponentsTransaction {
    return new ComponentsTransaction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComponentsTransaction {
    return new ComponentsTransaction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComponentsTransaction {
    return new ComponentsTransaction().fromJsonString(jsonString, options);
  }

  static equals(a: ComponentsTransaction | PlainMessage<ComponentsTransaction> | undefined, b: ComponentsTransaction | PlainMessage<ComponentsTransaction> | undefined): boolean {
    return proto3.util.equals(ComponentsTransaction, a, b);
  }
}

/**
 * @generated from message eventsourcing.v1.ComponentsTransaction.ColumnIndex
 */
export class ComponentsTransaction_ColumnIndex extends Message<ComponentsTransaction_ColumnIndex> {
  /**
   * @generated from field: uint32 table_index = 1;
   */
  tableIndex = 0;

  /**
   * @generated from field: uint32 patch_field_index = 2;
   */
  patchFieldIndex = 0;

  constructor(data?: PartialMessage<ComponentsTransaction_ColumnIndex>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "eventsourcing.v1.ComponentsTransaction.ColumnIndex";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "table_index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "patch_field_index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComponentsTransaction_ColumnIndex {
    return new ComponentsTransaction_ColumnIndex().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComponentsTransaction_ColumnIndex {
    return new ComponentsTransaction_ColumnIndex().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComponentsTransaction_ColumnIndex {
    return new ComponentsTransaction_ColumnIndex().fromJsonString(jsonString, options);
  }

  static equals(a: ComponentsTransaction_ColumnIndex | PlainMessage<ComponentsTransaction_ColumnIndex> | undefined, b: ComponentsTransaction_ColumnIndex | PlainMessage<ComponentsTransaction_ColumnIndex> | undefined): boolean {
    return proto3.util.equals(ComponentsTransaction_ColumnIndex, a, b);
  }
}

/**
 * @generated from message eventsourcing.v1.ComponentsTransaction.PairLastEvent
 */
export class ComponentsTransaction_PairLastEvent extends Message<ComponentsTransaction_PairLastEvent> {
  /**
   * @generated from field: eventsourcing.v1.EntityPair pair = 1;
   */
  pair?: EntityPair;

  /**
   * @generated from field: int64 last_event_ledger_id = 2;
   */
  lastEventLedgerId = protoInt64.zero;

  constructor(data?: PartialMessage<ComponentsTransaction_PairLastEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "eventsourcing.v1.ComponentsTransaction.PairLastEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pair", kind: "message", T: EntityPair },
    { no: 2, name: "last_event_ledger_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComponentsTransaction_PairLastEvent {
    return new ComponentsTransaction_PairLastEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComponentsTransaction_PairLastEvent {
    return new ComponentsTransaction_PairLastEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComponentsTransaction_PairLastEvent {
    return new ComponentsTransaction_PairLastEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ComponentsTransaction_PairLastEvent | PlainMessage<ComponentsTransaction_PairLastEvent> | undefined, b: ComponentsTransaction_PairLastEvent | PlainMessage<ComponentsTransaction_PairLastEvent> | undefined): boolean {
    return proto3.util.equals(ComponentsTransaction_PairLastEvent, a, b);
  }
}

/**
 * @generated from message eventsourcing.v1.ComponentsTransaction.PairPatch
 */
export class ComponentsTransaction_PairPatch extends Message<ComponentsTransaction_PairPatch> {
  /**
   * @generated from field: eventsourcing.v1.ComponentsTransaction.PairLastEvent pair_last_event = 1;
   */
  pairLastEvent?: ComponentsTransaction_PairLastEvent;

  /**
   * @generated from field: repeated eventsourcing.v1.ComponentsTransaction.ColumnIndex column_indices = 2;
   */
  columnIndices: ComponentsTransaction_ColumnIndex[] = [];

  constructor(data?: PartialMessage<ComponentsTransaction_PairPatch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "eventsourcing.v1.ComponentsTransaction.PairPatch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pair_last_event", kind: "message", T: ComponentsTransaction_PairLastEvent },
    { no: 2, name: "column_indices", kind: "message", T: ComponentsTransaction_ColumnIndex, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComponentsTransaction_PairPatch {
    return new ComponentsTransaction_PairPatch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComponentsTransaction_PairPatch {
    return new ComponentsTransaction_PairPatch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComponentsTransaction_PairPatch {
    return new ComponentsTransaction_PairPatch().fromJsonString(jsonString, options);
  }

  static equals(a: ComponentsTransaction_PairPatch | PlainMessage<ComponentsTransaction_PairPatch> | undefined, b: ComponentsTransaction_PairPatch | PlainMessage<ComponentsTransaction_PairPatch> | undefined): boolean {
    return proto3.util.equals(ComponentsTransaction_PairPatch, a, b);
  }
}

/**
 * @generated from message eventsourcing.v1.ComponentsTransaction.Patch
 */
export class ComponentsTransaction_Patch extends Message<ComponentsTransaction_Patch> {
  /**
   * @generated from field: repeated eventsourcing.v1.EntityPair added_pairs = 1;
   */
  addedPairs: EntityPair[] = [];

  /**
   * @generated from field: repeated eventsourcing.v1.ComponentsTransaction.PairLastEvent removed_pairs = 2;
   */
  removedPairs: ComponentsTransaction_PairLastEvent[] = [];

  /**
   * @generated from field: repeated eventsourcing.v1.ComponentsTransaction.PairPatch updated_pair_patches = 3;
   */
  updatedPairPatches: ComponentsTransaction_PairPatch[] = [];

  constructor(data?: PartialMessage<ComponentsTransaction_Patch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "eventsourcing.v1.ComponentsTransaction.Patch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "added_pairs", kind: "message", T: EntityPair, repeated: true },
    { no: 2, name: "removed_pairs", kind: "message", T: ComponentsTransaction_PairLastEvent, repeated: true },
    { no: 3, name: "updated_pair_patches", kind: "message", T: ComponentsTransaction_PairPatch, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComponentsTransaction_Patch {
    return new ComponentsTransaction_Patch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComponentsTransaction_Patch {
    return new ComponentsTransaction_Patch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComponentsTransaction_Patch {
    return new ComponentsTransaction_Patch().fromJsonString(jsonString, options);
  }

  static equals(a: ComponentsTransaction_Patch | PlainMessage<ComponentsTransaction_Patch> | undefined, b: ComponentsTransaction_Patch | PlainMessage<ComponentsTransaction_Patch> | undefined): boolean {
    return proto3.util.equals(ComponentsTransaction_Patch, a, b);
  }
}

/**
 * @generated from message eventsourcing.v1.AppendRequest
 */
export class AppendRequest extends Message<AppendRequest> {
  /**
   * @generated from field: eventsourcing.v1.ComponentsTransaction transaction = 1;
   */
  transaction?: ComponentsTransaction;

  constructor(data?: PartialMessage<AppendRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "eventsourcing.v1.AppendRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction", kind: "message", T: ComponentsTransaction },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AppendRequest {
    return new AppendRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AppendRequest {
    return new AppendRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AppendRequest {
    return new AppendRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AppendRequest | PlainMessage<AppendRequest> | undefined, b: AppendRequest | PlainMessage<AppendRequest> | undefined): boolean {
    return proto3.util.equals(AppendRequest, a, b);
  }
}

/**
 * @generated from message eventsourcing.v1.AppendResponse
 */
export class AppendResponse extends Message<AppendResponse> {
  /**
   * @generated from field: int64 event_id = 1;
   */
  eventId = protoInt64.zero;

  /**
   * @generated from field: bytes integrity = 2;
   */
  integrity = new Uint8Array(0);

  constructor(data?: PartialMessage<AppendResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "eventsourcing.v1.AppendResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "integrity", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AppendResponse {
    return new AppendResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AppendResponse {
    return new AppendResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AppendResponse {
    return new AppendResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AppendResponse | PlainMessage<AppendResponse> | undefined, b: AppendResponse | PlainMessage<AppendResponse> | undefined): boolean {
    return proto3.util.equals(AppendResponse, a, b);
  }
}

/**
 * @generated from message eventsourcing.v1.EventsRequest
 */
export class EventsRequest extends Message<EventsRequest> {
  /**
   * @generated from field: int64 last_event_id = 1;
   */
  lastEventId = protoInt64.zero;

  /**
   * @generated from field: uint32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: repeated int64 effected_component_ids = 3;
   */
  effectedComponentIds: bigint[] = [];

  constructor(data?: PartialMessage<EventsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "eventsourcing.v1.EventsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "last_event_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "effected_component_ids", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventsRequest {
    return new EventsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventsRequest {
    return new EventsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventsRequest {
    return new EventsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EventsRequest | PlainMessage<EventsRequest> | undefined, b: EventsRequest | PlainMessage<EventsRequest> | undefined): boolean {
    return proto3.util.equals(EventsRequest, a, b);
  }
}

/**
 * @generated from message eventsourcing.v1.EventsResponse
 */
export class EventsResponse extends Message<EventsResponse> {
  /**
   * @generated from field: repeated eventsourcing.v1.EventsResponse.Event events = 1;
   */
  events: EventsResponse_Event[] = [];

  /**
   * @generated from field: bool has_more = 2;
   */
  hasMore = false;

  /**
   * @generated from field: int64 count = 3;
   */
  count = protoInt64.zero;

  constructor(data?: PartialMessage<EventsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "eventsourcing.v1.EventsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "events", kind: "message", T: EventsResponse_Event, repeated: true },
    { no: 2, name: "has_more", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventsResponse {
    return new EventsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventsResponse {
    return new EventsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventsResponse {
    return new EventsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EventsResponse | PlainMessage<EventsResponse> | undefined, b: EventsResponse | PlainMessage<EventsResponse> | undefined): boolean {
    return proto3.util.equals(EventsResponse, a, b);
  }
}

/**
 * @generated from message eventsourcing.v1.EventsResponse.Event
 */
export class EventsResponse_Event extends Message<EventsResponse_Event> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: bytes integrity = 2;
   */
  integrity = new Uint8Array(0);

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 3;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: eventsourcing.v1.ComponentsTransaction transaction = 4;
   */
  transaction?: ComponentsTransaction;

  constructor(data?: PartialMessage<EventsResponse_Event>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "eventsourcing.v1.EventsResponse.Event";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "integrity", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "created_at", kind: "message", T: Timestamp },
    { no: 4, name: "transaction", kind: "message", T: ComponentsTransaction },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventsResponse_Event {
    return new EventsResponse_Event().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventsResponse_Event {
    return new EventsResponse_Event().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventsResponse_Event {
    return new EventsResponse_Event().fromJsonString(jsonString, options);
  }

  static equals(a: EventsResponse_Event | PlainMessage<EventsResponse_Event> | undefined, b: EventsResponse_Event | PlainMessage<EventsResponse_Event> | undefined): boolean {
    return proto3.util.equals(EventsResponse_Event, a, b);
  }
}

