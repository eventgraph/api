// @generated by protoc-gen-es v0.5.0 with parameter "target=ts"
// @generated from file eventsourcing/v1/eventsourcing.proto (package eventsourcing.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { ComponentQuery } from "../../domainconfig/v1/archetypes_pb.js";

/**
 * @generated from message eventsourcing.v1.EntityPair
 */
export class EntityPair extends Message<EntityPair> {
  /**
   * @generated from field: int64 from_entity = 1;
   */
  fromEntity = protoInt64.zero;

  /**
   * @generated from field: int64 to_entity = 2;
   */
  toEntity = protoInt64.zero;

  constructor(data?: PartialMessage<EntityPair>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "eventsourcing.v1.EntityPair";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from_entity", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "to_entity", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EntityPair {
    return new EntityPair().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EntityPair {
    return new EntityPair().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EntityPair {
    return new EntityPair().fromJsonString(jsonString, options);
  }

  static equals(a: EntityPair | PlainMessage<EntityPair> | undefined, b: EntityPair | PlainMessage<EntityPair> | undefined): boolean {
    return proto3.util.equals(EntityPair, a, b);
  }
}

/**
 * @generated from message eventsourcing.v1.ComponentTransaction
 */
export class ComponentTransaction extends Message<ComponentTransaction> {
  /**
   * @generated from field: repeated int64 i64s = 1;
   */
  i64s: bigint[] = [];

  /**
   * @generated from field: repeated double f64s = 2;
   */
  f64s: number[] = [];

  /**
   * @generated from field: repeated string texts = 3;
   */
  texts: string[] = [];

  /**
   * @generated from field: repeated bytes binaries = 4;
   */
  binaries: Uint8Array[] = [];

  /**
   * @generated from field: map<int64, eventsourcing.v1.ComponentTransaction.Patch> component_patches = 5;
   */
  componentPatches: { [key: string]: ComponentTransaction_Patch } = {};

  constructor(data?: PartialMessage<ComponentTransaction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "eventsourcing.v1.ComponentTransaction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "i64s", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
    { no: 2, name: "f64s", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, repeated: true },
    { no: 3, name: "texts", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "binaries", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 5, name: "component_patches", kind: "map", K: 3 /* ScalarType.INT64 */, V: {kind: "message", T: ComponentTransaction_Patch} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComponentTransaction {
    return new ComponentTransaction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComponentTransaction {
    return new ComponentTransaction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComponentTransaction {
    return new ComponentTransaction().fromJsonString(jsonString, options);
  }

  static equals(a: ComponentTransaction | PlainMessage<ComponentTransaction> | undefined, b: ComponentTransaction | PlainMessage<ComponentTransaction> | undefined): boolean {
    return proto3.util.equals(ComponentTransaction, a, b);
  }
}

/**
 * @generated from message eventsourcing.v1.ComponentTransaction.ColumnIndex
 */
export class ComponentTransaction_ColumnIndex extends Message<ComponentTransaction_ColumnIndex> {
  /**
   * @generated from field: uint32 table_index = 1;
   */
  tableIndex = 0;

  /**
   * @generated from field: uint32 patch_field_index = 2;
   */
  patchFieldIndex = 0;

  constructor(data?: PartialMessage<ComponentTransaction_ColumnIndex>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "eventsourcing.v1.ComponentTransaction.ColumnIndex";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "table_index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "patch_field_index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComponentTransaction_ColumnIndex {
    return new ComponentTransaction_ColumnIndex().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComponentTransaction_ColumnIndex {
    return new ComponentTransaction_ColumnIndex().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComponentTransaction_ColumnIndex {
    return new ComponentTransaction_ColumnIndex().fromJsonString(jsonString, options);
  }

  static equals(a: ComponentTransaction_ColumnIndex | PlainMessage<ComponentTransaction_ColumnIndex> | undefined, b: ComponentTransaction_ColumnIndex | PlainMessage<ComponentTransaction_ColumnIndex> | undefined): boolean {
    return proto3.util.equals(ComponentTransaction_ColumnIndex, a, b);
  }
}

/**
 * @generated from message eventsourcing.v1.ComponentTransaction.EntityPairPatch
 */
export class ComponentTransaction_EntityPairPatch extends Message<ComponentTransaction_EntityPairPatch> {
  /**
   * @generated from field: int64 integrity = 1;
   */
  integrity = protoInt64.zero;

  /**
   * @generated from field: repeated eventsourcing.v1.ComponentTransaction.ColumnIndex column_indices = 2;
   */
  columnIndices: ComponentTransaction_ColumnIndex[] = [];

  constructor(data?: PartialMessage<ComponentTransaction_EntityPairPatch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "eventsourcing.v1.ComponentTransaction.EntityPairPatch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "integrity", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "column_indices", kind: "message", T: ComponentTransaction_ColumnIndex, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComponentTransaction_EntityPairPatch {
    return new ComponentTransaction_EntityPairPatch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComponentTransaction_EntityPairPatch {
    return new ComponentTransaction_EntityPairPatch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComponentTransaction_EntityPairPatch {
    return new ComponentTransaction_EntityPairPatch().fromJsonString(jsonString, options);
  }

  static equals(a: ComponentTransaction_EntityPairPatch | PlainMessage<ComponentTransaction_EntityPairPatch> | undefined, b: ComponentTransaction_EntityPairPatch | PlainMessage<ComponentTransaction_EntityPairPatch> | undefined): boolean {
    return proto3.util.equals(ComponentTransaction_EntityPairPatch, a, b);
  }
}

/**
 * @generated from message eventsourcing.v1.ComponentTransaction.Patch
 */
export class ComponentTransaction_Patch extends Message<ComponentTransaction_Patch> {
  /**
   * @generated from field: repeated eventsourcing.v1.EntityPair added_pairs = 1;
   */
  addedPairs: EntityPair[] = [];

  /**
   * @generated from field: repeated eventsourcing.v1.EntityPair removed_pairs = 2;
   */
  removedPairs: EntityPair[] = [];

  /**
   * @generated from field: repeated eventsourcing.v1.ComponentTransaction.EntityPairPatch updated_entity_patches = 3;
   */
  updatedEntityPatches: ComponentTransaction_EntityPairPatch[] = [];

  constructor(data?: PartialMessage<ComponentTransaction_Patch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "eventsourcing.v1.ComponentTransaction.Patch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "added_pairs", kind: "message", T: EntityPair, repeated: true },
    { no: 2, name: "removed_pairs", kind: "message", T: EntityPair, repeated: true },
    { no: 3, name: "updated_entity_patches", kind: "message", T: ComponentTransaction_EntityPairPatch, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComponentTransaction_Patch {
    return new ComponentTransaction_Patch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComponentTransaction_Patch {
    return new ComponentTransaction_Patch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComponentTransaction_Patch {
    return new ComponentTransaction_Patch().fromJsonString(jsonString, options);
  }

  static equals(a: ComponentTransaction_Patch | PlainMessage<ComponentTransaction_Patch> | undefined, b: ComponentTransaction_Patch | PlainMessage<ComponentTransaction_Patch> | undefined): boolean {
    return proto3.util.equals(ComponentTransaction_Patch, a, b);
  }
}

/**
 * @generated from message eventsourcing.v1.UniqueEntityRequest
 */
export class UniqueEntityRequest extends Message<UniqueEntityRequest> {
  /**
   * @generated from field: uint32 count = 1;
   */
  count = 0;

  constructor(data?: PartialMessage<UniqueEntityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "eventsourcing.v1.UniqueEntityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UniqueEntityRequest {
    return new UniqueEntityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UniqueEntityRequest {
    return new UniqueEntityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UniqueEntityRequest {
    return new UniqueEntityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UniqueEntityRequest | PlainMessage<UniqueEntityRequest> | undefined, b: UniqueEntityRequest | PlainMessage<UniqueEntityRequest> | undefined): boolean {
    return proto3.util.equals(UniqueEntityRequest, a, b);
  }
}

/**
 * @generated from message eventsourcing.v1.UniqueEntityResponse
 */
export class UniqueEntityResponse extends Message<UniqueEntityResponse> {
  /**
   * @generated from field: repeated int64 entities = 1;
   */
  entities: bigint[] = [];

  constructor(data?: PartialMessage<UniqueEntityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "eventsourcing.v1.UniqueEntityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entities", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UniqueEntityResponse {
    return new UniqueEntityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UniqueEntityResponse {
    return new UniqueEntityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UniqueEntityResponse {
    return new UniqueEntityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UniqueEntityResponse | PlainMessage<UniqueEntityResponse> | undefined, b: UniqueEntityResponse | PlainMessage<UniqueEntityResponse> | undefined): boolean {
    return proto3.util.equals(UniqueEntityResponse, a, b);
  }
}

/**
 * @generated from message eventsourcing.v1.PatchRequest
 */
export class PatchRequest extends Message<PatchRequest> {
  /**
   * @generated from field: eventsourcing.v1.ComponentTransaction transaction = 1;
   */
  transaction?: ComponentTransaction;

  constructor(data?: PartialMessage<PatchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "eventsourcing.v1.PatchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction", kind: "message", T: ComponentTransaction },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchRequest {
    return new PatchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchRequest {
    return new PatchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchRequest {
    return new PatchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchRequest | PlainMessage<PatchRequest> | undefined, b: PatchRequest | PlainMessage<PatchRequest> | undefined): boolean {
    return proto3.util.equals(PatchRequest, a, b);
  }
}

/**
 * @generated from message eventsourcing.v1.PatchResponse
 */
export class PatchResponse extends Message<PatchResponse> {
  /**
   * @generated from field: repeated eventsourcing.v1.PatchResponse.EntityPairIntegrityHash updated_entity_pairs = 1;
   */
  updatedEntityPairs: PatchResponse_EntityPairIntegrityHash[] = [];

  constructor(data?: PartialMessage<PatchResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "eventsourcing.v1.PatchResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "updated_entity_pairs", kind: "message", T: PatchResponse_EntityPairIntegrityHash, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchResponse {
    return new PatchResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchResponse {
    return new PatchResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchResponse {
    return new PatchResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PatchResponse | PlainMessage<PatchResponse> | undefined, b: PatchResponse | PlainMessage<PatchResponse> | undefined): boolean {
    return proto3.util.equals(PatchResponse, a, b);
  }
}

/**
 * @generated from message eventsourcing.v1.PatchResponse.EntityPairIntegrityHash
 */
export class PatchResponse_EntityPairIntegrityHash extends Message<PatchResponse_EntityPairIntegrityHash> {
  /**
   * @generated from field: int64 component_entity = 1;
   */
  componentEntity = protoInt64.zero;

  /**
   * @generated from field: eventsourcing.v1.EntityPair entity_pair = 2;
   */
  entityPair?: EntityPair;

  /**
   * @generated from field: int64 integrity_hash = 3;
   */
  integrityHash = protoInt64.zero;

  constructor(data?: PartialMessage<PatchResponse_EntityPairIntegrityHash>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "eventsourcing.v1.PatchResponse.EntityPairIntegrityHash";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "component_entity", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "entity_pair", kind: "message", T: EntityPair },
    { no: 3, name: "integrity_hash", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchResponse_EntityPairIntegrityHash {
    return new PatchResponse_EntityPairIntegrityHash().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchResponse_EntityPairIntegrityHash {
    return new PatchResponse_EntityPairIntegrityHash().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchResponse_EntityPairIntegrityHash {
    return new PatchResponse_EntityPairIntegrityHash().fromJsonString(jsonString, options);
  }

  static equals(a: PatchResponse_EntityPairIntegrityHash | PlainMessage<PatchResponse_EntityPairIntegrityHash> | undefined, b: PatchResponse_EntityPairIntegrityHash | PlainMessage<PatchResponse_EntityPairIntegrityHash> | undefined): boolean {
    return proto3.util.equals(PatchResponse_EntityPairIntegrityHash, a, b);
  }
}

/**
 * @generated from message eventsourcing.v1.QueryRequest
 */
export class QueryRequest extends Message<QueryRequest> {
  /**
   * @generated from field: domainconfig.v1.ComponentQuery query = 1;
   */
  query?: ComponentQuery;

  /**
   * @generated from field: uint32 limit = 2;
   */
  limit = 0;

  constructor(data?: PartialMessage<QueryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "eventsourcing.v1.QueryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "message", T: ComponentQuery },
    { no: 2, name: "limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRequest {
    return new QueryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRequest {
    return new QueryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRequest {
    return new QueryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRequest | PlainMessage<QueryRequest> | undefined, b: QueryRequest | PlainMessage<QueryRequest> | undefined): boolean {
    return proto3.util.equals(QueryRequest, a, b);
  }
}

/**
 * @generated from message eventsourcing.v1.QueryResponse
 */
export class QueryResponse extends Message<QueryResponse> {
  /**
   * @generated from field: eventsourcing.v1.ComponentTransaction transaction = 1;
   */
  transaction?: ComponentTransaction;

  constructor(data?: PartialMessage<QueryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "eventsourcing.v1.QueryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction", kind: "message", T: ComponentTransaction },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryResponse {
    return new QueryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryResponse {
    return new QueryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryResponse {
    return new QueryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryResponse | PlainMessage<QueryResponse> | undefined, b: QueryResponse | PlainMessage<QueryResponse> | undefined): boolean {
    return proto3.util.equals(QueryResponse, a, b);
  }
}

