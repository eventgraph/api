// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file domainconfig/v1/properties.proto (package domainconfig.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Metadata } from "./shared_pb.js";

/**
 * @generated from message domainconfig.v1.DataType
 */
export class DataType extends Message<DataType> {
  /**
   * @generated from oneof domainconfig.v1.DataType.value
   */
  value: {
    /**
     * @generated from field: bool no_value = 1;
     */
    value: boolean;
    case: "noValue";
  } | {
    /**
     * @generated from field: int64 i64 = 2;
     */
    value: bigint;
    case: "i64";
  } | {
    /**
     * @generated from field: double f64 = 3;
     */
    value: number;
    case: "f64";
  } | {
    /**
     * @generated from field: string text = 4;
     */
    value: string;
    case: "text";
  } | {
    /**
     * @generated from field: bytes binary = 5;
     */
    value: Uint8Array;
    case: "binary";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<DataType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "domainconfig.v1.DataType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "no_value", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "value" },
    { no: 2, name: "i64", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "value" },
    { no: 3, name: "f64", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, oneof: "value" },
    { no: 4, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "value" },
    { no: 5, name: "binary", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataType {
    return new DataType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataType {
    return new DataType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataType {
    return new DataType().fromJsonString(jsonString, options);
  }

  static equals(a: DataType | PlainMessage<DataType> | undefined, b: DataType | PlainMessage<DataType> | undefined): boolean {
    return proto3.util.equals(DataType, a, b);
  }
}

/**
 * @generated from message domainconfig.v1.ValueDefinition
 */
export class ValueDefinition extends Message<ValueDefinition> {
  /**
   * @generated from field: domainconfig.v1.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: domainconfig.v1.DataType data_type = 2;
   */
  dataType?: DataType;

  constructor(data?: PartialMessage<ValueDefinition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "domainconfig.v1.ValueDefinition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata },
    { no: 2, name: "data_type", kind: "message", T: DataType },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValueDefinition {
    return new ValueDefinition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValueDefinition {
    return new ValueDefinition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValueDefinition {
    return new ValueDefinition().fromJsonString(jsonString, options);
  }

  static equals(a: ValueDefinition | PlainMessage<ValueDefinition> | undefined, b: ValueDefinition | PlainMessage<ValueDefinition> | undefined): boolean {
    return proto3.util.equals(ValueDefinition, a, b);
  }
}

/**
 * @generated from message domainconfig.v1.PropertyDefinition
 */
export class PropertyDefinition extends Message<PropertyDefinition> {
  /**
   * @generated from field: domainconfig.v1.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * Version version = 2;
   *
   * @generated from field: repeated domainconfig.v1.ValueDefinition values = 3;
   */
  values: ValueDefinition[] = [];

  constructor(data?: PartialMessage<PropertyDefinition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "domainconfig.v1.PropertyDefinition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata },
    { no: 3, name: "values", kind: "message", T: ValueDefinition, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PropertyDefinition {
    return new PropertyDefinition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PropertyDefinition {
    return new PropertyDefinition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PropertyDefinition {
    return new PropertyDefinition().fromJsonString(jsonString, options);
  }

  static equals(a: PropertyDefinition | PlainMessage<PropertyDefinition> | undefined, b: PropertyDefinition | PlainMessage<PropertyDefinition> | undefined): boolean {
    return proto3.util.equals(PropertyDefinition, a, b);
  }
}

