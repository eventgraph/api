// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file domainconfig/v1/archetypes.proto (package domainconfig.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Metadata } from "./shared_pb.js";

/**
 * @generated from message domainconfig.v1.QueryTerm
 */
export class QueryTerm extends Message<QueryTerm> {
  /**
   * @generated from field: int64 component_entity = 1;
   */
  componentEntity = protoInt64.zero;

  /**
   * @generated from field: domainconfig.v1.QueryTerm.Connection from_entity = 2;
   */
  fromEntity?: QueryTerm_Connection;

  /**
   * @generated from field: domainconfig.v1.QueryTerm.Connection to_entity = 3;
   */
  toEntity?: QueryTerm_Connection;

  constructor(data?: PartialMessage<QueryTerm>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "domainconfig.v1.QueryTerm";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "component_entity", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "from_entity", kind: "message", T: QueryTerm_Connection },
    { no: 3, name: "to_entity", kind: "message", T: QueryTerm_Connection },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTerm {
    return new QueryTerm().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTerm {
    return new QueryTerm().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTerm {
    return new QueryTerm().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTerm | PlainMessage<QueryTerm> | undefined, b: QueryTerm | PlainMessage<QueryTerm> | undefined): boolean {
    return proto3.util.equals(QueryTerm, a, b);
  }
}

/**
 * @generated from message domainconfig.v1.QueryTerm.Connection
 */
export class QueryTerm_Connection extends Message<QueryTerm_Connection> {
  /**
   * @generated from oneof domainconfig.v1.QueryTerm.Connection.mode
   */
  mode: {
    /**
     * @generated from field: bool empty = 1;
     */
    value: boolean;
    case: "empty";
  } | {
    /**
     * @generated from field: int64 instance = 2;
     */
    value: bigint;
    case: "instance";
  } | {
    /**
     * @generated from field: string init_variable = 3;
     */
    value: string;
    case: "initVariable";
  } | {
    /**
     * @generated from field: string variable = 4;
     */
    value: string;
    case: "variable";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<QueryTerm_Connection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "domainconfig.v1.QueryTerm.Connection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "empty", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "mode" },
    { no: 2, name: "instance", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "mode" },
    { no: 3, name: "init_variable", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "mode" },
    { no: 4, name: "variable", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "mode" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTerm_Connection {
    return new QueryTerm_Connection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTerm_Connection {
    return new QueryTerm_Connection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTerm_Connection {
    return new QueryTerm_Connection().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTerm_Connection | PlainMessage<QueryTerm_Connection> | undefined, b: QueryTerm_Connection | PlainMessage<QueryTerm_Connection> | undefined): boolean {
    return proto3.util.equals(QueryTerm_Connection, a, b);
  }
}

/**
 * @generated from message domainconfig.v1.ArchetypeDefinition
 */
export class ArchetypeDefinition extends Message<ArchetypeDefinition> {
  /**
   * @generated from field: domainconfig.v1.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: repeated domainconfig.v1.QueryTerm query_terms = 2;
   */
  queryTerms: QueryTerm[] = [];

  constructor(data?: PartialMessage<ArchetypeDefinition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "domainconfig.v1.ArchetypeDefinition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata },
    { no: 2, name: "query_terms", kind: "message", T: QueryTerm, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ArchetypeDefinition {
    return new ArchetypeDefinition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ArchetypeDefinition {
    return new ArchetypeDefinition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ArchetypeDefinition {
    return new ArchetypeDefinition().fromJsonString(jsonString, options);
  }

  static equals(a: ArchetypeDefinition | PlainMessage<ArchetypeDefinition> | undefined, b: ArchetypeDefinition | PlainMessage<ArchetypeDefinition> | undefined): boolean {
    return proto3.util.equals(ArchetypeDefinition, a, b);
  }
}

