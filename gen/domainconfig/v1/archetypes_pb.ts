// @generated by protoc-gen-es v0.5.0 with parameter "target=ts"
// @generated from file domainconfig/v1/archetypes.proto (package domainconfig.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Metadata } from "./shared_pb.js";

/**
 * @generated from message domainconfig.v1.ComponentQuery
 */
export class ComponentQuery extends Message<ComponentQuery> {
  constructor(data?: PartialMessage<ComponentQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "domainconfig.v1.ComponentQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComponentQuery {
    return new ComponentQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComponentQuery {
    return new ComponentQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComponentQuery {
    return new ComponentQuery().fromJsonString(jsonString, options);
  }

  static equals(a: ComponentQuery | PlainMessage<ComponentQuery> | undefined, b: ComponentQuery | PlainMessage<ComponentQuery> | undefined): boolean {
    return proto3.util.equals(ComponentQuery, a, b);
  }
}

/**
 * @generated from message domainconfig.v1.ComponentQuery.Connection
 */
export class ComponentQuery_Connection extends Message<ComponentQuery_Connection> {
  /**
   * @generated from oneof domainconfig.v1.ComponentQuery.Connection.connection
   */
  connection: {
    /**
     * @generated from field: bool wildcard = 1;
     */
    value: boolean;
    case: "wildcard";
  } | {
    /**
     * @generated from field: bool any = 2;
     */
    value: boolean;
    case: "any";
  } | {
    /**
     * @generated from field: string variable = 3;
     */
    value: string;
    case: "variable";
  } | {
    /**
     * @generated from field: int64 entity = 4;
     */
    value: bigint;
    case: "entity";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ComponentQuery_Connection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "domainconfig.v1.ComponentQuery.Connection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "wildcard", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "connection" },
    { no: 2, name: "any", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "connection" },
    { no: 3, name: "variable", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "connection" },
    { no: 4, name: "entity", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "connection" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComponentQuery_Connection {
    return new ComponentQuery_Connection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComponentQuery_Connection {
    return new ComponentQuery_Connection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComponentQuery_Connection {
    return new ComponentQuery_Connection().fromJsonString(jsonString, options);
  }

  static equals(a: ComponentQuery_Connection | PlainMessage<ComponentQuery_Connection> | undefined, b: ComponentQuery_Connection | PlainMessage<ComponentQuery_Connection> | undefined): boolean {
    return proto3.util.equals(ComponentQuery_Connection, a, b);
  }
}

/**
 * @generated from enum domainconfig.v1.ComponentQuery.Connection.Mode
 */
export enum ComponentQuery_Connection_Mode {
  /**
   * @generated from enum value: MODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: MODE_MANDATORY = 1;
   */
  MANDATORY = 1,

  /**
   * @generated from enum value: MODE_OPTIONAL = 2;
   */
  OPTIONAL = 2,

  /**
   * @generated from enum value: MODE_EXCLUDED = 3;
   */
  EXCLUDED = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ComponentQuery_Connection_Mode)
proto3.util.setEnumType(ComponentQuery_Connection_Mode, "domainconfig.v1.ComponentQuery.Connection.Mode", [
  { no: 0, name: "MODE_UNSPECIFIED" },
  { no: 1, name: "MODE_MANDATORY" },
  { no: 2, name: "MODE_OPTIONAL" },
  { no: 3, name: "MODE_EXCLUDED" },
]);

/**
 * @generated from message domainconfig.v1.ComponentQuery.Filter
 */
export class ComponentQuery_Filter extends Message<ComponentQuery_Filter> {
  /**
   * @generated from field: domainconfig.v1.ComponentQuery.Filter.Mode mode = 1;
   */
  mode = ComponentQuery_Filter_Mode.UNSPECIFIED;

  /**
   * @generated from field: repeated domainconfig.v1.ComponentQuery.Filter.Term terms = 2;
   */
  terms: ComponentQuery_Filter_Term[] = [];

  /**
   * @generated from field: repeated domainconfig.v1.ComponentQuery.Filter nested = 3;
   */
  nested: ComponentQuery_Filter[] = [];

  constructor(data?: PartialMessage<ComponentQuery_Filter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "domainconfig.v1.ComponentQuery.Filter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mode", kind: "enum", T: proto3.getEnumType(ComponentQuery_Filter_Mode) },
    { no: 2, name: "terms", kind: "message", T: ComponentQuery_Filter_Term, repeated: true },
    { no: 3, name: "nested", kind: "message", T: ComponentQuery_Filter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComponentQuery_Filter {
    return new ComponentQuery_Filter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComponentQuery_Filter {
    return new ComponentQuery_Filter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComponentQuery_Filter {
    return new ComponentQuery_Filter().fromJsonString(jsonString, options);
  }

  static equals(a: ComponentQuery_Filter | PlainMessage<ComponentQuery_Filter> | undefined, b: ComponentQuery_Filter | PlainMessage<ComponentQuery_Filter> | undefined): boolean {
    return proto3.util.equals(ComponentQuery_Filter, a, b);
  }
}

/**
 * @generated from enum domainconfig.v1.ComponentQuery.Filter.Mode
 */
export enum ComponentQuery_Filter_Mode {
  /**
   * @generated from enum value: MODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: MODE_AND = 1;
   */
  AND = 1,

  /**
   * @generated from enum value: MODE_OR = 2;
   */
  OR = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ComponentQuery_Filter_Mode)
proto3.util.setEnumType(ComponentQuery_Filter_Mode, "domainconfig.v1.ComponentQuery.Filter.Mode", [
  { no: 0, name: "MODE_UNSPECIFIED" },
  { no: 1, name: "MODE_AND" },
  { no: 2, name: "MODE_OR" },
]);

/**
 * @generated from message domainconfig.v1.ComponentQuery.Filter.Term
 */
export class ComponentQuery_Filter_Term extends Message<ComponentQuery_Filter_Term> {
  /**
   * @generated from field: domainconfig.v1.ComponentQuery.Connection from = 1;
   */
  from?: ComponentQuery_Connection;

  /**
   * @generated from field: domainconfig.v1.ComponentQuery.Connection to = 2;
   */
  to?: ComponentQuery_Connection;

  constructor(data?: PartialMessage<ComponentQuery_Filter_Term>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "domainconfig.v1.ComponentQuery.Filter.Term";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from", kind: "message", T: ComponentQuery_Connection },
    { no: 2, name: "to", kind: "message", T: ComponentQuery_Connection },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComponentQuery_Filter_Term {
    return new ComponentQuery_Filter_Term().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComponentQuery_Filter_Term {
    return new ComponentQuery_Filter_Term().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComponentQuery_Filter_Term {
    return new ComponentQuery_Filter_Term().fromJsonString(jsonString, options);
  }

  static equals(a: ComponentQuery_Filter_Term | PlainMessage<ComponentQuery_Filter_Term> | undefined, b: ComponentQuery_Filter_Term | PlainMessage<ComponentQuery_Filter_Term> | undefined): boolean {
    return proto3.util.equals(ComponentQuery_Filter_Term, a, b);
  }
}

/**
 * @generated from message domainconfig.v1.ArchetypeDefinition
 */
export class ArchetypeDefinition extends Message<ArchetypeDefinition> {
  /**
   * @generated from field: domainconfig.v1.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: domainconfig.v1.ComponentQuery root = 2;
   */
  root?: ComponentQuery;

  constructor(data?: PartialMessage<ArchetypeDefinition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "domainconfig.v1.ArchetypeDefinition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata },
    { no: 2, name: "root", kind: "message", T: ComponentQuery },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ArchetypeDefinition {
    return new ArchetypeDefinition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ArchetypeDefinition {
    return new ArchetypeDefinition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ArchetypeDefinition {
    return new ArchetypeDefinition().fromJsonString(jsonString, options);
  }

  static equals(a: ArchetypeDefinition | PlainMessage<ArchetypeDefinition> | undefined, b: ArchetypeDefinition | PlainMessage<ArchetypeDefinition> | undefined): boolean {
    return proto3.util.equals(ArchetypeDefinition, a, b);
  }
}

