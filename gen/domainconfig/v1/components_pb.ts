// @generated by protoc-gen-es v0.5.0 with parameter "target=ts"
// @generated from file domainconfig/v1/components.proto (package domainconfig.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Metadata } from "./shared_pb.js";
import { DataType } from "./properties_pb.js";

/**
 * @generated from message domainconfig.v1.FieldDefinition
 */
export class FieldDefinition extends Message<FieldDefinition> {
  /**
   * @generated from field: domainconfig.v1.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: int64 property_id = 2;
   */
  propertyId = protoInt64.zero;

  /**
   * @generated from field: repeated domainconfig.v1.DataType property_overrides = 3;
   */
  propertyOverrides: DataType[] = [];

  constructor(data?: PartialMessage<FieldDefinition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "domainconfig.v1.FieldDefinition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata },
    { no: 2, name: "property_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "property_overrides", kind: "message", T: DataType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FieldDefinition {
    return new FieldDefinition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FieldDefinition {
    return new FieldDefinition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FieldDefinition {
    return new FieldDefinition().fromJsonString(jsonString, options);
  }

  static equals(a: FieldDefinition | PlainMessage<FieldDefinition> | undefined, b: FieldDefinition | PlainMessage<FieldDefinition> | undefined): boolean {
    return proto3.util.equals(FieldDefinition, a, b);
  }
}

/**
 * @generated from message domainconfig.v1.ComponentDefinition
 */
export class ComponentDefinition extends Message<ComponentDefinition> {
  /**
   * @generated from field: domainconfig.v1.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: bool is_edge = 2;
   */
  isEdge = false;

  /**
   * @generated from field: repeated domainconfig.v1.FieldDefinition fields = 3;
   */
  fields: FieldDefinition[] = [];

  /**
   * @generated from field: repeated domainconfig.v1.ComponentDefinition.Index indices = 4;
   */
  indices: ComponentDefinition_Index[] = [];

  /**
   * @generated from field: bool disable_history = 5;
   */
  disableHistory = false;

  constructor(data?: PartialMessage<ComponentDefinition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "domainconfig.v1.ComponentDefinition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata },
    { no: 2, name: "is_edge", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "fields", kind: "message", T: FieldDefinition, repeated: true },
    { no: 4, name: "indices", kind: "message", T: ComponentDefinition_Index, repeated: true },
    { no: 5, name: "disable_history", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComponentDefinition {
    return new ComponentDefinition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComponentDefinition {
    return new ComponentDefinition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComponentDefinition {
    return new ComponentDefinition().fromJsonString(jsonString, options);
  }

  static equals(a: ComponentDefinition | PlainMessage<ComponentDefinition> | undefined, b: ComponentDefinition | PlainMessage<ComponentDefinition> | undefined): boolean {
    return proto3.util.equals(ComponentDefinition, a, b);
  }
}

/**
 * @generated from message domainconfig.v1.ComponentDefinition.IndexEntry
 */
export class ComponentDefinition_IndexEntry extends Message<ComponentDefinition_IndexEntry> {
  /**
   * @generated from field: int64 value_index = 1;
   */
  valueIndex = protoInt64.zero;

  /**
   * @generated from field: bool is_descending = 2;
   */
  isDescending = false;

  constructor(data?: PartialMessage<ComponentDefinition_IndexEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "domainconfig.v1.ComponentDefinition.IndexEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value_index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "is_descending", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComponentDefinition_IndexEntry {
    return new ComponentDefinition_IndexEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComponentDefinition_IndexEntry {
    return new ComponentDefinition_IndexEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComponentDefinition_IndexEntry {
    return new ComponentDefinition_IndexEntry().fromJsonString(jsonString, options);
  }

  static equals(a: ComponentDefinition_IndexEntry | PlainMessage<ComponentDefinition_IndexEntry> | undefined, b: ComponentDefinition_IndexEntry | PlainMessage<ComponentDefinition_IndexEntry> | undefined): boolean {
    return proto3.util.equals(ComponentDefinition_IndexEntry, a, b);
  }
}

/**
 * @generated from message domainconfig.v1.ComponentDefinition.Index
 */
export class ComponentDefinition_Index extends Message<ComponentDefinition_Index> {
  /**
   * @generated from field: repeated domainconfig.v1.ComponentDefinition.IndexEntry entries = 1;
   */
  entries: ComponentDefinition_IndexEntry[] = [];

  constructor(data?: PartialMessage<ComponentDefinition_Index>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "domainconfig.v1.ComponentDefinition.Index";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entries", kind: "message", T: ComponentDefinition_IndexEntry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComponentDefinition_Index {
    return new ComponentDefinition_Index().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComponentDefinition_Index {
    return new ComponentDefinition_Index().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComponentDefinition_Index {
    return new ComponentDefinition_Index().fromJsonString(jsonString, options);
  }

  static equals(a: ComponentDefinition_Index | PlainMessage<ComponentDefinition_Index> | undefined, b: ComponentDefinition_Index | PlainMessage<ComponentDefinition_Index> | undefined): boolean {
    return proto3.util.equals(ComponentDefinition_Index, a, b);
  }
}

