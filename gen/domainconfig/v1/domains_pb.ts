// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file domainconfig/v1/domains.proto (package domainconfig.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Metadata } from "./shared_pb.js";
import { ServiceDefinition } from "./services_pb.js";

/**
 * @generated from message domainconfig.v1.DomainDefinition
 */
export class DomainDefinition extends Message<DomainDefinition> {
  /**
   * @generated from field: domainconfig.v1.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: repeated domainconfig.v1.ServiceDefinition services = 3;
   */
  services: ServiceDefinition[] = [];

  constructor(data?: PartialMessage<DomainDefinition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "domainconfig.v1.DomainDefinition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata },
    { no: 3, name: "services", kind: "message", T: ServiceDefinition, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DomainDefinition {
    return new DomainDefinition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DomainDefinition {
    return new DomainDefinition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DomainDefinition {
    return new DomainDefinition().fromJsonString(jsonString, options);
  }

  static equals(a: DomainDefinition | PlainMessage<DomainDefinition> | undefined, b: DomainDefinition | PlainMessage<DomainDefinition> | undefined): boolean {
    return proto3.util.equals(DomainDefinition, a, b);
  }
}

/**
 * @generated from message domainconfig.v1.DomainDefinitions
 */
export class DomainDefinitions extends Message<DomainDefinitions> {
  /**
   * @generated from field: domainconfig.v1.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: repeated domainconfig.v1.DomainDefinition domains = 2;
   */
  domains: DomainDefinition[] = [];

  constructor(data?: PartialMessage<DomainDefinitions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "domainconfig.v1.DomainDefinitions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata },
    { no: 2, name: "domains", kind: "message", T: DomainDefinition, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DomainDefinitions {
    return new DomainDefinitions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DomainDefinitions {
    return new DomainDefinitions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DomainDefinitions {
    return new DomainDefinitions().fromJsonString(jsonString, options);
  }

  static equals(a: DomainDefinitions | PlainMessage<DomainDefinitions> | undefined, b: DomainDefinitions | PlainMessage<DomainDefinitions> | undefined): boolean {
    return proto3.util.equals(DomainDefinitions, a, b);
  }
}

